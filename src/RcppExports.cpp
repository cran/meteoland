// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// slope
NumericVector slope(NumericVector data, int nrows, int ncols, double cellWidth, double cellHeight);
RcppExport SEXP meteoland_slope(SEXP dataSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP cellWidthSEXP, SEXP cellHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< double >::type cellWidth(cellWidthSEXP);
    Rcpp::traits::input_parameter< double >::type cellHeight(cellHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(slope(data, nrows, ncols, cellWidth, cellHeight));
    return rcpp_result_gen;
END_RCPP
}
// aspect
NumericVector aspect(NumericVector data, int nrows, int ncols, double cellWidth, double cellHeight);
RcppExport SEXP meteoland_aspect(SEXP dataSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP cellWidthSEXP, SEXP cellHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< double >::type cellWidth(cellWidthSEXP);
    Rcpp::traits::input_parameter< double >::type cellHeight(cellHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(aspect(data, nrows, ncols, cellWidth, cellHeight));
    return rcpp_result_gen;
END_RCPP
}
// pseudoRainfall
NumericVector pseudoRainfall(NumericVector RainM, NumericVector daysMonthAll, double shape, double scale, int firstMonth);
RcppExport SEXP meteoland_pseudoRainfall(SEXP RainMSEXP, SEXP daysMonthAllSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP firstMonthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type RainM(RainMSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type daysMonthAll(daysMonthAllSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type firstMonth(firstMonthSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudoRainfall(RainM, daysMonthAll, shape, scale, firstMonth));
    return rcpp_result_gen;
END_RCPP
}
// meteo
DataFrame meteo(DataFrame MeteoMonth, NumericVector landscapeRainfall, double ERconv, double ERsyn, double shape, double scale, double albedo, int firstMonth, bool cyclic);
RcppExport SEXP meteoland_meteo(SEXP MeteoMonthSEXP, SEXP landscapeRainfallSEXP, SEXP ERconvSEXP, SEXP ERsynSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP albedoSEXP, SEXP firstMonthSEXP, SEXP cyclicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type MeteoMonth(MeteoMonthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type landscapeRainfall(landscapeRainfallSEXP);
    Rcpp::traits::input_parameter< double >::type ERconv(ERconvSEXP);
    Rcpp::traits::input_parameter< double >::type ERsyn(ERsynSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type albedo(albedoSEXP);
    Rcpp::traits::input_parameter< int >::type firstMonth(firstMonthSEXP);
    Rcpp::traits::input_parameter< bool >::type cyclic(cyclicSEXP);
    rcpp_result_gen = Rcpp::wrap(meteo(MeteoMonth, landscapeRainfall, ERconv, ERsyn, shape, scale, albedo, firstMonth, cyclic));
    return rcpp_result_gen;
END_RCPP
}
// temporalSmoothing
NumericMatrix temporalSmoothing(NumericMatrix input, int numDays, bool prec);
RcppExport SEXP meteoland_temporalSmoothing(SEXP inputSEXP, SEXP numDaysSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type numDays(numDaysSEXP);
    Rcpp::traits::input_parameter< bool >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(temporalSmoothing(input, numDays, prec));
    return rcpp_result_gen;
END_RCPP
}
// interpolateTemperatureSeriesPoints
NumericMatrix interpolateTemperatureSeriesPoints(NumericVector Xp, NumericVector Yp, NumericVector Zp, NumericVector X, NumericVector Y, NumericVector Z, NumericMatrix T, double iniRp, double alpha, int N, int iterations);
RcppExport SEXP meteoland_interpolateTemperatureSeriesPoints(SEXP XpSEXP, SEXP YpSEXP, SEXP ZpSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP iniRpSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xp(XpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yp(YpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zp(ZpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type iniRp(iniRpSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolateTemperatureSeriesPoints(Xp, Yp, Zp, X, Y, Z, T, iniRp, alpha, N, iterations));
    return rcpp_result_gen;
END_RCPP
}
// interpolatePrecipitationSeriesPoints
NumericMatrix interpolatePrecipitationSeriesPoints(NumericVector Xp, NumericVector Yp, NumericVector Zp, NumericVector X, NumericVector Y, NumericVector Z, NumericMatrix P, NumericMatrix Psmooth, double iniRp, double alpha_event, double alpha_amount, int N_event, int N_amount, int iterations, double popcrit, double fmax);
RcppExport SEXP meteoland_interpolatePrecipitationSeriesPoints(SEXP XpSEXP, SEXP YpSEXP, SEXP ZpSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP PSEXP, SEXP PsmoothSEXP, SEXP iniRpSEXP, SEXP alpha_eventSEXP, SEXP alpha_amountSEXP, SEXP N_eventSEXP, SEXP N_amountSEXP, SEXP iterationsSEXP, SEXP popcritSEXP, SEXP fmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xp(XpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yp(YpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zp(ZpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Psmooth(PsmoothSEXP);
    Rcpp::traits::input_parameter< double >::type iniRp(iniRpSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_event(alpha_eventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_amount(alpha_amountSEXP);
    Rcpp::traits::input_parameter< int >::type N_event(N_eventSEXP);
    Rcpp::traits::input_parameter< int >::type N_amount(N_amountSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type popcrit(popcritSEXP);
    Rcpp::traits::input_parameter< double >::type fmax(fmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolatePrecipitationSeriesPoints(Xp, Yp, Zp, X, Y, Z, P, Psmooth, iniRp, alpha_event, alpha_amount, N_event, N_amount, iterations, popcrit, fmax));
    return rcpp_result_gen;
END_RCPP
}
// interpolatePrecipitationEventSeriesPoints
NumericMatrix interpolatePrecipitationEventSeriesPoints(NumericVector Xp, NumericVector Yp, NumericVector Zp, NumericVector X, NumericVector Y, NumericVector Z, NumericMatrix Pevent, double iniRp, double alpha, int N, int iterations, double popcrit);
RcppExport SEXP meteoland_interpolatePrecipitationEventSeriesPoints(SEXP XpSEXP, SEXP YpSEXP, SEXP ZpSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP PeventSEXP, SEXP iniRpSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP iterationsSEXP, SEXP popcritSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xp(XpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yp(YpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zp(ZpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pevent(PeventSEXP);
    Rcpp::traits::input_parameter< double >::type iniRp(iniRpSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type popcrit(popcritSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolatePrecipitationEventSeriesPoints(Xp, Yp, Zp, X, Y, Z, Pevent, iniRp, alpha, N, iterations, popcrit));
    return rcpp_result_gen;
END_RCPP
}
// vapourPressureFromRH
NumericMatrix vapourPressureFromRH(NumericMatrix T, NumericMatrix RH);
RcppExport SEXP meteoland_vapourPressureFromRH(SEXP TSEXP, SEXP RHSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type RH(RHSEXP);
    rcpp_result_gen = Rcpp::wrap(vapourPressureFromRH(T, RH));
    return rcpp_result_gen;
END_RCPP
}
// dewpointTemperatureFromRH
NumericMatrix dewpointTemperatureFromRH(NumericMatrix T, NumericMatrix RH);
RcppExport SEXP meteoland_dewpointTemperatureFromRH(SEXP TSEXP, SEXP RHSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type RH(RHSEXP);
    rcpp_result_gen = Rcpp::wrap(dewpointTemperatureFromRH(T, RH));
    return rcpp_result_gen;
END_RCPP
}
// temp2VP
NumericVector temp2VP(NumericVector TD);
RcppExport SEXP meteoland_temp2VP(SEXP TDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type TD(TDSEXP);
    rcpp_result_gen = Rcpp::wrap(temp2VP(TD));
    return rcpp_result_gen;
END_RCPP
}
// relativeHumidityFromMinMaxTemp
NumericVector relativeHumidityFromMinMaxTemp(NumericVector Tmin, NumericVector Tmax);
RcppExport SEXP meteoland_relativeHumidityFromMinMaxTemp(SEXP TminSEXP, SEXP TmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Tmin(TminSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tmax(TmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(relativeHumidityFromMinMaxTemp(Tmin, Tmax));
    return rcpp_result_gen;
END_RCPP
}
// relativeHumidityFromDewpointTemp
NumericVector relativeHumidityFromDewpointTemp(NumericVector T, NumericVector TD);
RcppExport SEXP meteoland_relativeHumidityFromDewpointTemp(SEXP TSEXP, SEXP TDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type TD(TDSEXP);
    rcpp_result_gen = Rcpp::wrap(relativeHumidityFromDewpointTemp(T, TD));
    return rcpp_result_gen;
END_RCPP
}
// dailyEquilibriumPET
NumericVector dailyEquilibriumPET(NumericVector Temp, NumericVector Rn);
RcppExport SEXP meteoland_dailyEquilibriumPET(SEXP TempSEXP, SEXP RnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Temp(TempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rn(RnSEXP);
    rcpp_result_gen = Rcpp::wrap(dailyEquilibriumPET(Temp, Rn));
    return rcpp_result_gen;
END_RCPP
}
// PenmanPETPointSeries
NumericVector PenmanPETPointSeries(double latitude, double elevation, IntegerVector J, NumericVector Tmin, NumericVector Tmax, NumericVector RHmin, NumericVector RHmax, NumericVector R_s, NumericVector u, double z, double z0, double alpha, String windfun);
RcppExport SEXP meteoland_PenmanPETPointSeries(SEXP latitudeSEXP, SEXP elevationSEXP, SEXP JSEXP, SEXP TminSEXP, SEXP TmaxSEXP, SEXP RHminSEXP, SEXP RHmaxSEXP, SEXP R_sSEXP, SEXP uSEXP, SEXP zSEXP, SEXP z0SEXP, SEXP alphaSEXP, SEXP windfunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type J(JSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tmin(TminSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RHmin(RHminSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RHmax(RHmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_s(R_sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< String >::type windfun(windfunSEXP);
    rcpp_result_gen = Rcpp::wrap(PenmanPETPointSeries(latitude, elevation, J, Tmin, Tmax, RHmin, RHmax, R_s, u, z, z0, alpha, windfun));
    return rcpp_result_gen;
END_RCPP
}
// PenmanPETPointsDay
NumericVector PenmanPETPointsDay(NumericVector latitude, NumericVector elevation, int J, NumericVector Tmin, NumericVector Tmax, NumericVector RHmin, NumericVector RHmax, NumericVector R_s, NumericVector u, double z, double z0, double alpha, String windfun);
RcppExport SEXP meteoland_PenmanPETPointsDay(SEXP latitudeSEXP, SEXP elevationSEXP, SEXP JSEXP, SEXP TminSEXP, SEXP TmaxSEXP, SEXP RHminSEXP, SEXP RHmaxSEXP, SEXP R_sSEXP, SEXP uSEXP, SEXP zSEXP, SEXP z0SEXP, SEXP alphaSEXP, SEXP windfunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tmin(TminSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RHmin(RHminSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RHmax(RHmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_s(R_sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< String >::type windfun(windfunSEXP);
    rcpp_result_gen = Rcpp::wrap(PenmanPETPointsDay(latitude, elevation, J, Tmin, Tmax, RHmin, RHmax, R_s, u, z, z0, alpha, windfun));
    return rcpp_result_gen;
END_RCPP
}
// potentialRadiationSeries
NumericVector potentialRadiationSeries(double phi, double A, double Zx, NumericVector doy, double step);
RcppExport SEXP meteoland_potentialRadiationSeries(SEXP phiSEXP, SEXP ASEXP, SEXP ZxSEXP, SEXP doySEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type Zx(ZxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type doy(doySEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(potentialRadiationSeries(phi, A, Zx, doy, step));
    return rcpp_result_gen;
END_RCPP
}
// potentialRadiationPoints
NumericVector potentialRadiationPoints(double phi, NumericVector A, NumericVector Zx, int doy, double step);
RcppExport SEXP meteoland_potentialRadiationPoints(SEXP phiSEXP, SEXP ASEXP, SEXP ZxSEXP, SEXP doySEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zx(ZxSEXP);
    Rcpp::traits::input_parameter< int >::type doy(doySEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(potentialRadiationPoints(phi, A, Zx, doy, step));
    return rcpp_result_gen;
END_RCPP
}
// radiationSeries
NumericVector radiationSeries(double phi, double elevation, double A, double Zx, NumericVector doy, NumericVector diffTemp, NumericVector diffTempMonth, NumericVector VP, NumericVector P, double step);
RcppExport SEXP meteoland_radiationSeries(SEXP phiSEXP, SEXP elevationSEXP, SEXP ASEXP, SEXP ZxSEXP, SEXP doySEXP, SEXP diffTempSEXP, SEXP diffTempMonthSEXP, SEXP VPSEXP, SEXP PSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type Zx(ZxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type doy(doySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type diffTemp(diffTempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type diffTempMonth(diffTempMonthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type VP(VPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(radiationSeries(phi, elevation, A, Zx, doy, diffTemp, diffTempMonth, VP, P, step));
    return rcpp_result_gen;
END_RCPP
}
// radiationPoints
NumericVector radiationPoints(NumericVector phi, NumericVector elevation, NumericVector A, NumericVector Zx, int doy, NumericVector diffTemp, NumericVector diffTempMonth, NumericVector VP, NumericVector P, double step);
RcppExport SEXP meteoland_radiationPoints(SEXP phiSEXP, SEXP elevationSEXP, SEXP ASEXP, SEXP ZxSEXP, SEXP doySEXP, SEXP diffTempSEXP, SEXP diffTempMonthSEXP, SEXP VPSEXP, SEXP PSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zx(ZxSEXP);
    Rcpp::traits::input_parameter< int >::type doy(doySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type diffTemp(diffTempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type diffTempMonth(diffTempMonthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type VP(VPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(radiationPoints(phi, elevation, A, Zx, doy, diffTemp, diffTempMonth, VP, P, step));
    return rcpp_result_gen;
END_RCPP
}
// getWindFieldIndexAndFactor
List getWindFieldIndexAndFactor(NumericMatrix windSpeed, NumericMatrix windDirection, NumericMatrix wfSpeed, NumericMatrix wfDirection);
RcppExport SEXP meteoland_getWindFieldIndexAndFactor(SEXP windSpeedSEXP, SEXP windDirectionSEXP, SEXP wfSpeedSEXP, SEXP wfDirectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type windSpeed(windSpeedSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type windDirection(windDirectionSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type wfSpeed(wfSpeedSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type wfDirection(wfDirectionSEXP);
    rcpp_result_gen = Rcpp::wrap(getWindFieldIndexAndFactor(windSpeed, windDirection, wfSpeed, wfDirection));
    return rcpp_result_gen;
END_RCPP
}
// interpolateWindFieldSeriesPoints
List interpolateWindFieldSeriesPoints(NumericVector Xp, NumericVector Yp, NumericMatrix WS, NumericMatrix WD, NumericVector X, NumericVector Y, IntegerMatrix I, NumericMatrix F, double iniRp, double alpha, int N, int iterations);
RcppExport SEXP meteoland_interpolateWindFieldSeriesPoints(SEXP XpSEXP, SEXP YpSEXP, SEXP WSSEXP, SEXP WDSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ISEXP, SEXP FSEXP, SEXP iniRpSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xp(XpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yp(YpSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type WS(WSSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type WD(WDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type F(FSEXP);
    Rcpp::traits::input_parameter< double >::type iniRp(iniRpSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolateWindFieldSeriesPoints(Xp, Yp, WS, WD, X, Y, I, F, iniRp, alpha, N, iterations));
    return rcpp_result_gen;
END_RCPP
}
// interpolateWindStationSeriesPoints
List interpolateWindStationSeriesPoints(NumericVector Xp, NumericVector Yp, NumericMatrix WS, NumericMatrix WD, NumericVector X, NumericVector Y, double iniRp, double alpha, int N, int iterations);
RcppExport SEXP meteoland_interpolateWindStationSeriesPoints(SEXP XpSEXP, SEXP YpSEXP, SEXP WSSEXP, SEXP WDSEXP, SEXP XSEXP, SEXP YSEXP, SEXP iniRpSEXP, SEXP alphaSEXP, SEXP NSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xp(XpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yp(YpSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type WS(WSSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type WD(WDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type iniRp(iniRpSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolateWindStationSeriesPoints(Xp, Yp, WS, WD, X, Y, iniRp, alpha, N, iterations));
    return rcpp_result_gen;
END_RCPP
}
